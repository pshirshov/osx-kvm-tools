#!/bin/bash -e

set -e

readonly BINPATH="$0"
readonly TRUEPATH=$(readlink ${BINPATH} || echo $BINPATH)
readonly SELFNAME=$(basename $TRUEPATH)
readonly SELFPATH=$(cd "$(dirname $TRUEPATH)"; pwd -P)
source $SELFPATH/settings

function docker-reset() {
   supervisorctl -c /usr/local/etc/supervisord.ini stop dockerfw || true
   mkdir -p /usr/local/etc/supervisor.d/
   pkill -9 -f forwardall || true

   tmpconfig=/tmp/lxc-docker-config.yaml

   pubkey=$(cat ~/.ssh/id_rsa.pub)

   cat <<EOT > $tmpconfig
profiles:
- default
config:
   security.nesting: "true"
   boot.autostart: "false"
   linux.kernel_modules: ip_tables,ip6_tables,netlink_diag,nf_nat,overlay,br_netfilter,overlay
   user.vendor-data: |
      #cloud-config
      users:
         - default
      disable_root: 0
      ssh_authorized_keys:
         - "${pubkey}"
      timezone: Europe/Dublin
   user.user-data: |
      #cloud-config
      packages:
         - nfs-common
         - openssh-server
      hostname: ${MAC_VM_DOCKER}
   user.network-config: |
      version: 2
      ethernets:
         eth0:
            match:
               name: eth0
            dhcp4: yes
devices:
   eth0:
      name: eth0
      nictype: bridged
      parent: br0
      type: nic
      hwaddr: ${MAC_VM_DOCKER_MACADDR}
   homedir:
      path: ${HOME}
      source: /mnt/home-${MAC_VM_GUEST_USER}/
      type: disk
   tmpdir:
      path: /private/var/folders
      source: /mnt/var-folders/
      type: disk
limits:
   cpu: 4
EOT

   cat <<EOT > /usr/local/etc/supervisor.d/docker.ini
[program:dockerfw]
command=/bin/bash ${SELFPATH}/forwardall
stopsignal=KILL
killasgroup=true
stdout_logfile=/tmp/dockerfw.out.log        ; stdout log path, NONE for none; default AUTO
stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
stdout_logfile_backups=1      ; # of stdout logfile backups (0 means none, default 10)
stdout_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)
stdout_events_enabled=false   ; emit events on stdout writes (default false)
stdout_syslog=false           ; send stdout to syslog with process name (default false)
stderr_logfile=/tmp/dockerfw.err.log        ; stderr log path, NONE for none; default AUTO
stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
stderr_logfile_backups=1      ; # of stderr logfile backups (0 means none, default 10)
stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)
stderr_events_enabled=false   ; emit events on stderr writes (default false)
stderr_syslog=false           ; send stderr to syslog with process name (default false)
EOT

   ssh-keygen -R ${MAC_VM_DOCKER}
   scp $tmpconfig ${MAC_VM_HOST_SSH}:$tmpconfig
   ssh ${MAC_VM_HOST_SSH} "$LXCBIN rm -f docker || true"
   ssh ${MAC_VM_HOST_SSH} "$LXCBIN launch $BASEIMAGE docker < $tmpconfig"
   ssh ${MAC_VM_HOST_SSH} "$LXCBIN exec docker -- /usr/bin/cloud-init status -w"
   ssh ${MAC_VM_HOST_SSH} "$LXCBIN restart docker"

   docker-machine rm -f default || true
   docker-machine create -d generic --generic-ip-address ${MAC_VM_DOCKER} --generic-ssh-user ${MAC_VM_DOCKER_USER} --engine-storage-driver btrfs default
   #docker-machine create -d generic --generic-ip-address ${MAC_VM_DOCKER} default
   eval "$(docker-machine env default)"
   supervisorctl -c /usr/local/etc/supervisord.ini update dockerfw
   supervisorctl -c /usr/local/etc/supervisord.ini start dockerfw
   docker-diag
   docker-test
}

function docker-diag() {
    printf "${GREEN}nfsd status:${NC}\n$(nfsd status)\n"
    printf "${GREEN}nfsd check:${NC}\n$(nfsd checkexports)\n"
    printf "${GREEN}hostname:${NC} $(hostname)\n"
    printf "${GREEN}hackintosh address:${NC}\n$(host ${MAC_VM_GUEST})\n"
    printf "${GREEN}hackintosh ifconfig:${NC}\n$(ifconfig | grep 192.168)\n"
    printf "${GREEN}pinging docker:${NC}\n"
    ping -c 1 ${MAC_VM_DOCKER}
    printf "${GREEN}checking fstab:${NC}\n"
    ssh ${MAC_VM_HOST_SSH} "cat /etc/fstab | grep nfs"
    printf "${GREEN}checking host mounts:${NC}\n"
    ssh ${MAC_VM_HOST_SSH} "mount | grep nfs"
    printf "${GREEN}checking available nfs mounts:${NC}\n"
    ssh ${MAC_VM_DOCKER_SSH} -o "StrictHostKeyChecking no" "showmount -e ${MAC_VM_GUEST}"
    printf "${GREEN}checking lxc-docker mounts:${NC}\n"
    ssh ${MAC_VM_DOCKER_SSH} -o "StrictHostKeyChecking no" "mount | grep nfs"
    printf "${GREEN}checking container:${NC}\n"
    ssh ${MAC_VM_HOST_SSH} "$LXCBIN list | grep docker"
    printf "${GREEN}checking forwarder:${NC}\n"
    ps aux | grep forwardall | grep -v grep
    printf "${GREEN}forwarder status:${NC}\n"
    supervisorctl -c /usr/local/etc/supervisord.ini status dockerfw
    printf "${GREEN}forwarder tail:${NC}\n"
    supervisorctl -c /usr/local/etc/supervisord.ini tail -300 dockerfw
}

function docker-test() {
   readonly testname=docker-test.html
   readonly token=$(uuidgen)
   readonly shareddir=$HOME
   readonly sharedfile=${shareddir}/${testname}

   trap "(rm -f ${sharedfile}) && (docker rm -f nginx-test || true) && (echo cleanup!)" RETURN

   echo "${token}" > $sharedfile
   url="http://localhost:8989/${testname}"

   docker rm -f nginx-test || true
   docker run --name nginx-test -v ${shareddir}:/usr/share/nginx/html:ro -p 8989:80 -d nginx

   n=0
   until [ "$n" -ge 5 ]
   do
      printf "${GREEN}Trying to fetch ${url}...${NC}\n"
      out=$(curl ${url}) && break
      n=$((n+1))
      sleep 1
   done
   printf "${GREEN}Got output...${NC}\n"

   if [[ $out == *${token}* ]]; then
      printf "${GREEN}Docker works!${NC}\n"
   else
      printf "${RED}Unexpected output:${NC}\n${out}\n"
      exit 1
   fi
}

function off() {
   ssh ${MAC_VM_HOST_SSH} "$LXCBIN stop docker || true"
   ssh ${MAC_VM_HOST_SSH} "umount -v -a -t nfs || true"
   ssh -f ${MAC_VM_HOST_SSH} '/bin/bash -x -c "sleep 3 && systemctl poweroff"'
   osascript -e 'tell app "System Events" to shut down'
}

function reboot() {
   ssh ${MAC_VM_HOST_SSH} "$LXCBIN stop docker || true"
   ssh ${MAC_VM_HOST_SSH} "umount -v -a -t nfs || true"
   ssh -f ${MAC_VM_HOST_SSH} '/bin/bash -x -c "sleep 3 && systemctl reboot"'
   osascript -e 'tell app "System Events" to shut down'
}


function reboot-target() {
   ssh ${MAC_VM_HOST_SSH} "mount /boot || true"

   TARGET_INDEX=$(ssh ${MAC_VM_HOST_SSH} "cat /boot/grub/grub.cfg | grep -E '^menuentry' | grep -n $1 | cut -d : -f 1 | head -n 1")

   ssh ${MAC_VM_HOST_SSH} "$LXCBIN stop docker || true"
   ssh ${MAC_VM_HOST_SSH} "umount -v -a -t nfs || true"
   ssh ${MAC_VM_HOST_SSH} "grub-reboot $(($TARGET_INDEX-1))"

   ssh -f ${MAC_VM_HOST_SSH} '/bin/bash -x -c "sleep 3 && systemctl reboot"'
   osascript -e 'tell app "System Events" to shut down'
}

function reboot-bios() {
   ssh ${MAC_VM_HOST_SSH} "$LXCBIN stop docker || true"
   ssh ${MAC_VM_HOST_SSH} "umount -v -a -t nfs || true"
   ssh -f ${MAC_VM_HOST_SSH} '/bin/bash -x -c "sleep 3 && systemctl --firmware-setup reboot"'
   osascript -e 'tell app "System Events" to shut down'
}

function suspend() {
   ssh -f ${MAC_VM_HOST_SSH} '/bin/bash -x -c "sleep 25 && echo -n mem > /sys/power/state && virsh start ${MAC_VM_HOST_GUEST_LIBVIRT_NAME}"'
   osascript -e 'tell app "System Events" to shut down'
}


if [[ "$#" -gt 0 ]]; then
    arg=$1
    shift

    case $arg in
        off)
            off
        ;;
        suspend)
            suspend
        ;;
        reboot)
            if [[ "$#" -eq 0 ]]; then
                reboot
            else
                target=$1
                shift
                case $target in
                  win)
                     reboot-target Windows
                  ;;
                  ubuntu)
                     reboot-target Ubuntu
                  ;;
                  novm)
                     reboot-target novm
                  ;;
                  bios)
                     reboot-bios
                  ;;
                esac
                echo "reboot target: $target"
            fi
        ;;
        docker)
            while [[ "$#" -gt 0 ]]; do
                arg=$1
                shift
                case $arg in
                    diag)
                        docker-diag
                    ;;
                    test)
                        docker-test
                    ;;
                    reset)
                        docker-reset
                    ;;
                esac
            done
         ;;
         *)
            echo "Unexpected command: $*"
            exit 1
         ;;
    esac
else
    echo "An argument required"
    exit 1
fi
